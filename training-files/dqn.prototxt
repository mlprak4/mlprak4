name: "DQN"
layer {
  name: "frames_input_layer"
  type: "MemoryData"
  top: "frames"
  top: "dummy1"
  memory_data_param {
    batch_size: 32
    channels: 1
    height: 27
    width: 48
  }
}
layer {
  name: "target_input_layer"
  type: "MemoryData"
  top: "target"
  top: "dummy2"
  memory_data_param {
    batch_size: 32
    channels: 5
    height: 1
    width: 1
  }
}
layer {
  name: "filter_input_layer"
  type: "MemoryData"
  top: "filter"
  top: "dummy3"
  memory_data_param {
    batch_size: 32
    channels: 5
    height: 1
    width: 1
  }
}

layer {
  name: "filter_flatten_layer"
  type: "Flatten"
  bottom: "filter"
  top: "flattened_filter"
}

layer {
  name: "silence_layer"
  type: "Silence"
  bottom: "dummy1"
  bottom: "dummy2"
  bottom: "dummy3"
}
layer {
  name: "conv1_layer"
  type: "Convolution"
  bottom: "frames"
  top: "conv1"
  convolution_param {
    num_output: 16
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "conv1_relu_layer"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "conv2_layer"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  convolution_param {
    num_output: 32
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "conv2_relu_layer"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip1_layer"
  type: "InnerProduct"
  bottom: "conv2"
  top: "ip1"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "ip1_relu_layer"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip2_layer"
  type: "InnerProduct"
  bottom: "ip1"
  top: "q_values"
  inner_product_param {
    num_output: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "eltwise_layer"
  type: "Eltwise"
  bottom: "q_values"
  bottom: "flattened_filter"
  top: "filtered_q_values"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "filtered_q_values"
  bottom: "target"
  top: "loss"
}
